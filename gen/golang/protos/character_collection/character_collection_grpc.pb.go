// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: protos/character_collection/character_collection.proto

package character_collection

import (
	context "context"
	model "github.com/yeom-c/protobuf-grpc-go/gen/golang/protos/model"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CharacterCollectionServiceClient is the client API for CharacterCollectionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CharacterCollectionServiceClient interface {
	GetCharacterCollections(ctx context.Context, in *model.Empty, opts ...grpc.CallOption) (*GetCharacterCollectionsRes, error)
}

type characterCollectionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCharacterCollectionServiceClient(cc grpc.ClientConnInterface) CharacterCollectionServiceClient {
	return &characterCollectionServiceClient{cc}
}

func (c *characterCollectionServiceClient) GetCharacterCollections(ctx context.Context, in *model.Empty, opts ...grpc.CallOption) (*GetCharacterCollectionsRes, error) {
	out := new(GetCharacterCollectionsRes)
	err := c.cc.Invoke(ctx, "/character_collection.CharacterCollectionService/GetCharacterCollections", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CharacterCollectionServiceServer is the server API for CharacterCollectionService service.
// All implementations must embed UnimplementedCharacterCollectionServiceServer
// for forward compatibility
type CharacterCollectionServiceServer interface {
	GetCharacterCollections(context.Context, *model.Empty) (*GetCharacterCollectionsRes, error)
	mustEmbedUnimplementedCharacterCollectionServiceServer()
}

// UnimplementedCharacterCollectionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCharacterCollectionServiceServer struct {
}

func (UnimplementedCharacterCollectionServiceServer) GetCharacterCollections(context.Context, *model.Empty) (*GetCharacterCollectionsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCharacterCollections not implemented")
}
func (UnimplementedCharacterCollectionServiceServer) mustEmbedUnimplementedCharacterCollectionServiceServer() {
}

// UnsafeCharacterCollectionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CharacterCollectionServiceServer will
// result in compilation errors.
type UnsafeCharacterCollectionServiceServer interface {
	mustEmbedUnimplementedCharacterCollectionServiceServer()
}

func RegisterCharacterCollectionServiceServer(s grpc.ServiceRegistrar, srv CharacterCollectionServiceServer) {
	s.RegisterService(&CharacterCollectionService_ServiceDesc, srv)
}

func _CharacterCollectionService_GetCharacterCollections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CharacterCollectionServiceServer).GetCharacterCollections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/character_collection.CharacterCollectionService/GetCharacterCollections",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CharacterCollectionServiceServer).GetCharacterCollections(ctx, req.(*model.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// CharacterCollectionService_ServiceDesc is the grpc.ServiceDesc for CharacterCollectionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CharacterCollectionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "character_collection.CharacterCollectionService",
	HandlerType: (*CharacterCollectionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCharacterCollections",
			Handler:    _CharacterCollectionService_GetCharacterCollections_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/character_collection/character_collection.proto",
}
