// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: protos/cheat/cheat.proto

package cheat

import (
	context "context"
	model "github.com/yeom-c/protobuf-grpc-go/gen/golang/protos/model"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CheatServiceClient is the client API for CheatService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CheatServiceClient interface {
	CreateMails(ctx context.Context, in *model.Empty, opts ...grpc.CallOption) (*model.Result, error)
	CreateAsset(ctx context.Context, in *CreateAssetReq, opts ...grpc.CallOption) (*model.Result, error)
}

type cheatServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCheatServiceClient(cc grpc.ClientConnInterface) CheatServiceClient {
	return &cheatServiceClient{cc}
}

func (c *cheatServiceClient) CreateMails(ctx context.Context, in *model.Empty, opts ...grpc.CallOption) (*model.Result, error) {
	out := new(model.Result)
	err := c.cc.Invoke(ctx, "/cheat.CheatService/CreateMails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cheatServiceClient) CreateAsset(ctx context.Context, in *CreateAssetReq, opts ...grpc.CallOption) (*model.Result, error) {
	out := new(model.Result)
	err := c.cc.Invoke(ctx, "/cheat.CheatService/CreateAsset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CheatServiceServer is the server API for CheatService service.
// All implementations must embed UnimplementedCheatServiceServer
// for forward compatibility
type CheatServiceServer interface {
	CreateMails(context.Context, *model.Empty) (*model.Result, error)
	CreateAsset(context.Context, *CreateAssetReq) (*model.Result, error)
	mustEmbedUnimplementedCheatServiceServer()
}

// UnimplementedCheatServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCheatServiceServer struct {
}

func (UnimplementedCheatServiceServer) CreateMails(context.Context, *model.Empty) (*model.Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMails not implemented")
}
func (UnimplementedCheatServiceServer) CreateAsset(context.Context, *CreateAssetReq) (*model.Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAsset not implemented")
}
func (UnimplementedCheatServiceServer) mustEmbedUnimplementedCheatServiceServer() {}

// UnsafeCheatServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CheatServiceServer will
// result in compilation errors.
type UnsafeCheatServiceServer interface {
	mustEmbedUnimplementedCheatServiceServer()
}

func RegisterCheatServiceServer(s grpc.ServiceRegistrar, srv CheatServiceServer) {
	s.RegisterService(&CheatService_ServiceDesc, srv)
}

func _CheatService_CreateMails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CheatServiceServer).CreateMails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cheat.CheatService/CreateMails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CheatServiceServer).CreateMails(ctx, req.(*model.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CheatService_CreateAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAssetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CheatServiceServer).CreateAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cheat.CheatService/CreateAsset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CheatServiceServer).CreateAsset(ctx, req.(*CreateAssetReq))
	}
	return interceptor(ctx, in, info, handler)
}

// CheatService_ServiceDesc is the grpc.ServiceDesc for CheatService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CheatService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cheat.CheatService",
	HandlerType: (*CheatServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateMails",
			Handler:    _CheatService_CreateMails_Handler,
		},
		{
			MethodName: "CreateAsset",
			Handler:    _CheatService_CreateAsset_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/cheat/cheat.proto",
}
