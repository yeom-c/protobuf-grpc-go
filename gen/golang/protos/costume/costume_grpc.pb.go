// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: protos/costume/costume.proto

package costume

import (
	context "context"
	model "github.com/yeom-c/protobuf-grpc-go/gen/golang/protos/model"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CostumeServiceClient is the client API for CostumeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CostumeServiceClient interface {
	GetCostumes(ctx context.Context, in *model.Empty, opts ...grpc.CallOption) (*GetCostumesRes, error)
	GetCharacterCostumes(ctx context.Context, in *GetCharacterCostumesReq, opts ...grpc.CallOption) (*GetCostumesRes, error)
	EquipCostume(ctx context.Context, in *EquipCostumeReq, opts ...grpc.CallOption) (*model.Result, error)
}

type costumeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCostumeServiceClient(cc grpc.ClientConnInterface) CostumeServiceClient {
	return &costumeServiceClient{cc}
}

func (c *costumeServiceClient) GetCostumes(ctx context.Context, in *model.Empty, opts ...grpc.CallOption) (*GetCostumesRes, error) {
	out := new(GetCostumesRes)
	err := c.cc.Invoke(ctx, "/costume.CostumeService/GetCostumes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *costumeServiceClient) GetCharacterCostumes(ctx context.Context, in *GetCharacterCostumesReq, opts ...grpc.CallOption) (*GetCostumesRes, error) {
	out := new(GetCostumesRes)
	err := c.cc.Invoke(ctx, "/costume.CostumeService/GetCharacterCostumes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *costumeServiceClient) EquipCostume(ctx context.Context, in *EquipCostumeReq, opts ...grpc.CallOption) (*model.Result, error) {
	out := new(model.Result)
	err := c.cc.Invoke(ctx, "/costume.CostumeService/EquipCostume", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CostumeServiceServer is the server API for CostumeService service.
// All implementations must embed UnimplementedCostumeServiceServer
// for forward compatibility
type CostumeServiceServer interface {
	GetCostumes(context.Context, *model.Empty) (*GetCostumesRes, error)
	GetCharacterCostumes(context.Context, *GetCharacterCostumesReq) (*GetCostumesRes, error)
	EquipCostume(context.Context, *EquipCostumeReq) (*model.Result, error)
	mustEmbedUnimplementedCostumeServiceServer()
}

// UnimplementedCostumeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCostumeServiceServer struct {
}

func (UnimplementedCostumeServiceServer) GetCostumes(context.Context, *model.Empty) (*GetCostumesRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCostumes not implemented")
}
func (UnimplementedCostumeServiceServer) GetCharacterCostumes(context.Context, *GetCharacterCostumesReq) (*GetCostumesRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCharacterCostumes not implemented")
}
func (UnimplementedCostumeServiceServer) EquipCostume(context.Context, *EquipCostumeReq) (*model.Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EquipCostume not implemented")
}
func (UnimplementedCostumeServiceServer) mustEmbedUnimplementedCostumeServiceServer() {}

// UnsafeCostumeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CostumeServiceServer will
// result in compilation errors.
type UnsafeCostumeServiceServer interface {
	mustEmbedUnimplementedCostumeServiceServer()
}

func RegisterCostumeServiceServer(s grpc.ServiceRegistrar, srv CostumeServiceServer) {
	s.RegisterService(&CostumeService_ServiceDesc, srv)
}

func _CostumeService_GetCostumes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CostumeServiceServer).GetCostumes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/costume.CostumeService/GetCostumes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CostumeServiceServer).GetCostumes(ctx, req.(*model.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CostumeService_GetCharacterCostumes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCharacterCostumesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CostumeServiceServer).GetCharacterCostumes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/costume.CostumeService/GetCharacterCostumes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CostumeServiceServer).GetCharacterCostumes(ctx, req.(*GetCharacterCostumesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CostumeService_EquipCostume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EquipCostumeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CostumeServiceServer).EquipCostume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/costume.CostumeService/EquipCostume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CostumeServiceServer).EquipCostume(ctx, req.(*EquipCostumeReq))
	}
	return interceptor(ctx, in, info, handler)
}

// CostumeService_ServiceDesc is the grpc.ServiceDesc for CostumeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CostumeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "costume.CostumeService",
	HandlerType: (*CostumeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCostumes",
			Handler:    _CostumeService_GetCostumes_Handler,
		},
		{
			MethodName: "GetCharacterCostumes",
			Handler:    _CostumeService_GetCharacterCostumes_Handler,
		},
		{
			MethodName: "EquipCostume",
			Handler:    _CostumeService_EquipCostume_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/costume/costume.proto",
}
