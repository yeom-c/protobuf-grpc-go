// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: protos/battle_result/battle_result.proto

package battle_result

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BattleResultServiceClient is the client API for BattleResultService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BattleResultServiceClient interface {
	ConfirmBattleResult(ctx context.Context, in *ConfirmBattleResultReq, opts ...grpc.CallOption) (*ConfirmBattleResultRes, error)
}

type battleResultServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBattleResultServiceClient(cc grpc.ClientConnInterface) BattleResultServiceClient {
	return &battleResultServiceClient{cc}
}

func (c *battleResultServiceClient) ConfirmBattleResult(ctx context.Context, in *ConfirmBattleResultReq, opts ...grpc.CallOption) (*ConfirmBattleResultRes, error) {
	out := new(ConfirmBattleResultRes)
	err := c.cc.Invoke(ctx, "/mail.BattleResultService/ConfirmBattleResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BattleResultServiceServer is the server API for BattleResultService service.
// All implementations must embed UnimplementedBattleResultServiceServer
// for forward compatibility
type BattleResultServiceServer interface {
	ConfirmBattleResult(context.Context, *ConfirmBattleResultReq) (*ConfirmBattleResultRes, error)
	mustEmbedUnimplementedBattleResultServiceServer()
}

// UnimplementedBattleResultServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBattleResultServiceServer struct {
}

func (UnimplementedBattleResultServiceServer) ConfirmBattleResult(context.Context, *ConfirmBattleResultReq) (*ConfirmBattleResultRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmBattleResult not implemented")
}
func (UnimplementedBattleResultServiceServer) mustEmbedUnimplementedBattleResultServiceServer() {}

// UnsafeBattleResultServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BattleResultServiceServer will
// result in compilation errors.
type UnsafeBattleResultServiceServer interface {
	mustEmbedUnimplementedBattleResultServiceServer()
}

func RegisterBattleResultServiceServer(s grpc.ServiceRegistrar, srv BattleResultServiceServer) {
	s.RegisterService(&BattleResultService_ServiceDesc, srv)
}

func _BattleResultService_ConfirmBattleResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfirmBattleResultReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BattleResultServiceServer).ConfirmBattleResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mail.BattleResultService/ConfirmBattleResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BattleResultServiceServer).ConfirmBattleResult(ctx, req.(*ConfirmBattleResultReq))
	}
	return interceptor(ctx, in, info, handler)
}

// BattleResultService_ServiceDesc is the grpc.ServiceDesc for BattleResultService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BattleResultService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mail.BattleResultService",
	HandlerType: (*BattleResultServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ConfirmBattleResult",
			Handler:    _BattleResultService_ConfirmBattleResult_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/battle_result/battle_result.proto",
}
